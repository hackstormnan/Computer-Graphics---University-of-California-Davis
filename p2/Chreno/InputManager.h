#pragma once
#include "GL_Dependencies.h"
#include "Singleton.h"

enum Keycode
{
    KEYCODE_SPACE = GLFW_KEY_SPACE,
    KEYCODE_APOSTROPHE = GLFW_KEY_APOSTROPHE,    /* ' */
    KEYCODE_COMMA = GLFW_KEY_COMMA,    /* , */
    KEYCODE_MINUS = GLFW_KEY_MINUS,    /* - */
    KEYCODE_PERIOD = GLFW_KEY_PERIOD,    /* . */
    KEYCODE_SLASH = GLFW_KEY_SLASH,    /* / */
    KEYCODE_0 = GLFW_KEY_0,
    KEYCODE_1 = GLFW_KEY_1,
    KEYCODE_2 = GLFW_KEY_2,
    KEYCODE_3 = GLFW_KEY_3,
    KEYCODE_4 = GLFW_KEY_4,
    KEYCODE_5 = GLFW_KEY_5,
    KEYCODE_6 = GLFW_KEY_6,
    KEYCODE_7 = GLFW_KEY_7,
    KEYCODE_8 = GLFW_KEY_8,
    KEYCODE_9 = GLFW_KEY_9,
    KEYCODE_SEMICOLON = GLFW_KEY_SEMICOLON,    /* ; */
    KEYCODE_EQUAL = GLFW_KEY_EQUAL,    /* = */
    KEYCODE_A = GLFW_KEY_A,
    KEYCODE_B = GLFW_KEY_B,
    KEYCODE_C = GLFW_KEY_C,
    KEYCODE_D = GLFW_KEY_D,
    KEYCODE_E = GLFW_KEY_E,
    KEYCODE_F = GLFW_KEY_F,
    KEYCODE_G = GLFW_KEY_G,
    KEYCODE_H = GLFW_KEY_H,
    KEYCODE_I = GLFW_KEY_I,
    KEYCODE_J = GLFW_KEY_J,
    KEYCODE_K = GLFW_KEY_K,
    KEYCODE_L = GLFW_KEY_L,
    KEYCODE_M = GLFW_KEY_M,
    KEYCODE_N = GLFW_KEY_N,
    KEYCODE_O = GLFW_KEY_O,
    KEYCODE_P = GLFW_KEY_P,
    KEYCODE_Q = GLFW_KEY_Q,
    KEYCODE_R = GLFW_KEY_R,
    KEYCODE_S = GLFW_KEY_S,
    KEYCODE_T = GLFW_KEY_T,
    KEYCODE_U = GLFW_KEY_U,
    KEYCODE_V = GLFW_KEY_V,
    KEYCODE_W = GLFW_KEY_W,
    KEYCODE_X = GLFW_KEY_X,
    KEYCODE_Y = GLFW_KEY_Y,
    KEYCODE_Z = GLFW_KEY_Z,
    KEYCODE_LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET,    /* [ */
    KEYCODE_BACKSLASH = GLFW_KEY_BACKSLASH,    /* \ */
    KEYCODE_RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,    /* ] */
    KEYCODE_GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT,    /* ` */
    KEYCODE_WORLD_1 = GLFW_KEY_WORLD_1,    /* non-US #1 */
    KEYCODE_WORLD_2 = GLFW_KEY_WORLD_2,    /* non-US #2 */
    KEYCODE_ESCAPE = GLFW_KEY_ESCAPE,
    KEYCODE_ENTER = GLFW_KEY_ENTER,
    KEYCODE_TAB = GLFW_KEY_TAB,
    KEYCODE_BACKSPACE = GLFW_KEY_BACKSPACE,
    KEYCODE_INSERT = GLFW_KEY_INSERT,
    KEYCODE_DELETE = GLFW_KEY_DELETE,
    KEYCODE_RIGHT = GLFW_KEY_RIGHT,
    KEYCODE_LEFT = GLFW_KEY_LEFT,
    KEYCODE_DOWN = GLFW_KEY_DOWN,
    KEYCODE_UP = GLFW_KEY_UP,
    KEYCODE_PAGE_UP = GLFW_KEY_PAGE_UP,
    KEYCODE_PAGE_DOWN = GLFW_KEY_PAGE_DOWN,
    KEYCODE_HOME = GLFW_KEY_HOME,
    KEYCODE_END = GLFW_KEY_END,
    KEYCODE_CAPS_LOCK = GLFW_KEY_CAPS_LOCK,
    KEYCODE_SCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,
    KEYCODE_NUM_LOCK = GLFW_KEY_NUM_LOCK,
    KEYCODE_PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
    KEYCODE_PAUSE = GLFW_KEY_PAUSE,
    KEYCODE_F1 = GLFW_KEY_F1,
    KEYCODE_F2 = GLFW_KEY_F2,
    KEYCODE_F3 = GLFW_KEY_F3,
    KEYCODE_F4 = GLFW_KEY_F4,
    KEYCODE_F5 = GLFW_KEY_F5,
    KEYCODE_F6 = GLFW_KEY_F6,
    KEYCODE_F7 = GLFW_KEY_F7,
    KEYCODE_F8 = GLFW_KEY_F8,
    KEYCODE_F9 = GLFW_KEY_F9,
    KEYCODE_F10 = GLFW_KEY_F10,
    KEYCODE_F11 = GLFW_KEY_F11,
    KEYCODE_F12 = GLFW_KEY_F12,
    KEYCODE_F13 = GLFW_KEY_F13,
    KEYCODE_F14 = GLFW_KEY_F14,
    KEYCODE_F15 = GLFW_KEY_F15,
    KEYCODE_F16 = GLFW_KEY_F16,
    KEYCODE_F17 = GLFW_KEY_F17,
    KEYCODE_F18 = GLFW_KEY_F18,
    KEYCODE_F19 = GLFW_KEY_F19,
    KEYCODE_F20 = GLFW_KEY_F20,
    KEYCODE_F21 = GLFW_KEY_F21,
    KEYCODE_F22 = GLFW_KEY_F22,
    KEYCODE_F23 = GLFW_KEY_F23,
    KEYCODE_F24 = GLFW_KEY_F24,
    KEYCODE_F25 = GLFW_KEY_F25,
    KEYCODE_KP_0 = GLFW_KEY_KP_0,
    KEYCODE_KP_1 = GLFW_KEY_KP_1,
    KEYCODE_KP_2 = GLFW_KEY_KP_2,
    KEYCODE_KP_3 = GLFW_KEY_KP_3,
    KEYCODE_KP_4 = GLFW_KEY_KP_4,
    KEYCODE_KP_5 = GLFW_KEY_KP_5,
    KEYCODE_KP_6 = GLFW_KEY_KP_6,
    KEYCODE_KP_7 = GLFW_KEY_KP_7,
    KEYCODE_KP_8 = GLFW_KEY_KP_8,
    KEYCODE_KP_9 = GLFW_KEY_KP_9,
    KEYCODE_KP_DECIMAL = GLFW_KEY_KP_DECIMAL,
    KEYCODE_KP_DIVIDE = GLFW_KEY_KP_DIVIDE,
    KEYCODE_KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
    KEYCODE_KP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,
    KEYCODE_KP_ADD = GLFW_KEY_KP_ADD,
    KEYCODE_KP_ENTER = GLFW_KEY_KP_ENTER,
    KEYCODE_KP_EQUAL = GLFW_KEY_KP_EQUAL,
    KEYCODE_LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,
    KEYCODE_LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,
    KEYCODE_LEFT_ALT = GLFW_KEY_LEFT_ALT,
    KEYCODE_LEFT_SUPER = GLFW_KEY_LEFT_SUPER,
    KEYCODE_RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
    KEYCODE_RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
    KEYCODE_RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
    KEYCODE_RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
    KEYCODE_MENU = GLFW_KEY_MENU,
    KEYCODE_COUNT = 348
};

enum MouseButton {
    MOUSE_BUTTON_1 = GLFW_MOUSE_BUTTON_1,
    MOUSE_BUTTON_2 = GLFW_MOUSE_BUTTON_2,
    MOUSE_BUTTON_3 = GLFW_MOUSE_BUTTON_3,
    MOUSE_BUTTON_4 = GLFW_MOUSE_BUTTON_4,
    MOUSE_BUTTON_5 = GLFW_MOUSE_BUTTON_5,
    MOUSE_BUTTON_6 = GLFW_MOUSE_BUTTON_6,
    MOUSE_BUTTON_7 = GLFW_MOUSE_BUTTON_7,
    MOUSE_BUTTON_8 = GLFW_MOUSE_BUTTON_8,
    MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_LAST,
    MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_LEFT,
    MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_RIGHT,
    MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_MIDDLE,
    MOUSE_BUTTON_COUNT = 7
};

struct Keyboard {
    bool currentKeys[KEYCODE_COUNT];
    bool previousKeys[KEYCODE_COUNT];
};

struct Mouse {
	int x;
    int y;
    bool currentButtons[MOUSE_BUTTON_COUNT];
    bool previousButtons[MOUSE_BUTTON_COUNT];
};

class InputManager : public Singleton<InputManager>
{
    friend class Singleton<InputManager>;
public:
    InputManager();
	~InputManager();

	bool IsKeyDown(Keycode p_eKey);
	bool IsKeyPressed(Keycode p_eKey);
	bool IsKeyReleased(Keycode p_eKey);
	bool IsMouseButtonDown(MouseButton p_iButton);
	bool IsMouseButtonPressed(MouseButton p_iButton);
	bool IsMouseButtonReleased(MouseButton p_iButton);

	glm::vec2 GetMousePosition();

    Keyboard * GetKeyboard();
    Mouse * GetMouse();

    void InputHandle(GLFWwindow* window);
private:
	Keyboard * m_keyboard;
	Mouse * m_mouse;
};